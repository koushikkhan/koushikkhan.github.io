{
  "hash": "407063ebdd7ed38172735301affeb280",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Bash Commands to Get Started on Linux Clouds\"\nfrom: markdown+emoji\ndescription: \"Part 2: Advanced Tools for Commandline\"\nauthor:\n  - name: Koushik Khan \ndate: 03-26-2023\ncategories: [linux, cloud]\nimage: cloud.jpg\ndraft: false\n---\n\n<center>\n<img src=\"cloud.jpg\" alt=\"alt text\" title=\"\" height=\"400\" width=\"800\"/>\n<figcaption>Photo by <a href=\"https://unsplash.com/@dianamia?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">C Dustin</a> on <a href=\"https://unsplash.com/images/nature/cloud?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Unsplash</a>\n</figcaption>\n</center>\n\nIn our previous [post](https://koushikkhan.github.io/posts/2023-03-22-bash-commands-for-cloud-1/), we have seen examples to become confident enough for getting a grip on linux commands. This is the time now to jump into more advanced topics. Let's go.\n\n\n# Working with permissions\n\nThe word 'Permission' typically stands for putting a guard wall while accessing any resource. For example, someone may or may not has permission to access a specific folder (directory) in a computer. It all depend on roles and responsibilities of the users.\n\nIn linux, permission to access files and directories is categorized into three levels, these are **user**, **group** and **others**. Let's see what do they mean when they are in action,\n\n+ **user**: this category refers to the owner of the file or directory. Being the owner, user has the highest level of access to the file or directory and an user can modify or delete it.\n\n+ **group**: this category refers to a group of users having the same level of access to a file or directory. If a group is assigned a specific permission, then all users within the group are also having same permission.\n\n+ **others**: this category refers to all other users who are not the owner or part of the group assigned to the file or directory. These users are having lowest level of access to the file or directory.\n\n\nThere are three specific access types for all users - *read*, *write* and *execute* and these are denoted by *r*, *w* and *x* respectively. \n\nTherefore, for each file, access level is represented by a sequence of nine characters just like below:\n\n  ![fig-1: File permissions](file_permissions.png)\n\n*Don't consider the very first character as part of access level string as it just denotes whether the corresponding entity is a file or directory, for file it is shown here as '-' (hyphen) and for directory it will be 'd'*\n\nNow, let's consider one file e.g. *records.txt*. For this file,\n\n+ the user 'koushik' is owner of the file as mentioned and 'koushik' has both read and write permission but not the execute permission\n+ the group has only read permission\n+ others also have read permission\n\nIt is to be noted that, read permission will allow anyone to open and see the file contents only, the file cannot be modified or deleted and it cannot be executed as a program. \n\n## Permission in numeric mode\n\nAll these three characters i.e. 'r', 'w' and 'x' are also represented by numbers as follows:\n\n+ r (read): 4\n+ w (write): 2\n+ x (execute): 1\n\nand their sum is expressed as the desired permission for an user. Some examples below will make the concept clear.\n\n+ r = 4, w = 2, x = 1\n  + sum = 7\n  + the user has *read*, *write* and *execute* permission for the corresponding file\n+ r = 4, w = 2, x = 0\n  + sum = 6\n  + the user has *read* and *write* permission only for the corresponding file, but the file cannot be executed as a program\n+ r = 4, w = 0, x = 1\n  + sum = 5\n  + the user has *read* and *execute* permission only for the corresponding file, but the file cannot be modified\n\n# Assigning or changing permission\n\nWhen a file is created by an user (as *records.txt* in the above figure), it has certain level of permission, which is typically\n\n+ read and write permission for the user who has created the file\n+ read only permission for the group\n+ read only permission for anyone who is either not the owner or doesn't belong to a certain user group\n\nBut, there are situations when as a system adming someone may want to modify the permission level for a file, for a specific user and group.\n\nThe command `chmod` is used to modify the permission level for a file.\n\nBelow are some of the usages of `chmod` with explanations\n\n\n```{bash}\n# set execute permission for the user (creator)\nchmod u+x records.txt\n\n# set write permission for the group\nchmod g+w records.txt\n\n# set full permission for the user, group and others\nchmod ugo+rwx records.txt\n```\n\n\nAll these above commands can also be used in numeric mode as well which is easier when you have the *permission-number* mapping (like r = 4) in your mind,\n\n\n```{bash}\n# set execute permission for the user (creator)\nchmod 744 records.txt\n\n# set write permission for the group\nchmod 764 records.txt\n\n# set full permission for the user, group and others\nchmod 777 records.txt\n```\n\n\nNote that in the above examples, I have assumed records.txt is already having the permission level as 644 (read and write permission for the user, read only permission for the group and others)\n\n# Ownership of a file and directory\n\nIn the figure below, if you observe, corresponding to each file, it is written as `koushik koushik`. This is denoting the user and group information for the file.\n\n  ![fig-2: File ownership](file_ownership.png)\n\nThe command `chown` is used to allow the ownership info of files and directories to be changed. The word \"chown\" stands for \"change owner.\"\n\nHere, \"owner\" is the username or user ID (a numeric sequence) of the new owner, and \"group\" is the name or ID (a numeric sequence) of the new group. If no group is specified, the file's group ownership will not be changed.\n\n\n```{bash}\n# usage example\nchown new_user:new_group records.txt\n```\n\n\nThe above command will change the ownership of the file to the `new_user` who also belongs to `new_group`\n\nIf we want to change ownership of a directory we have to use a flag for `chown` command and that is `-R`, it denotes changing ownership of all the files and subdirectories within the target directory.\n\n\n```{bash}\nchown -R new_user:new_group test_dir\n```\n\n\n# Working with environment variables and paths\n\nEnvironment variables are like global variables in your program. They are typically static in nature i.e. once they are defined, they are not usually modified.\n\nSuch variables can be defined in the terminal using `VARIABLE=value` command and they are available only for the current terminal session, once you close the terminal (i.e. kill the current terminal session), they are removed from the memory. \n\nThere are situations when you may need to create a permamnet environment variable and this can be achived by putting a command similar to what is given below in the `.bashrc` or `.bash_profile` file. These files are hidden files (as their names start with a `.`) and used for storing lot of configuration parametes.\n\n\n```{bash}\nexport MY_ENV_VAR=value\n```\n\nOne can make use of the environment variable using `$` operator just like `$MY_ENV_VAR`.\n\nNote that, there is no space characters right before and after the `=` sign while defining the environment variables.\n\nJust like environment variables, setting up paths is also a very common problem while using any operating system. There is a pre-defined environment variable, `PATH`, in all linux based systems, that shows all the typical directory paths where the system searches for any executable. \n\nIf someone wants to append a new path to this `PATH` variable, then it is typically done by putting a command similar to what is given below again in the `.bashrc` or `.bash_profile` file.\n\n\n\n```{bash}\n# adding new path at the end\nexport PATH=$PATH:/home/koushik/my_project\n```\n\nor\n\n```{bash}\n# adding new path at the start\nexport PATH=/home/koushik/my_project:$PATH\n```\n\n\nSince we are writing this to either `.bashrc` or `.bash_profile` file, the system makes this configuration changes permanent.\n\nAlso note that, we have to reload the `.bashrc` or `.bash_profile` file once we are ready with the changes to have them reflected in the current terminal session by using the below command\n\n\n\n```{bash}\nsource /home/koushik/.bashrc\n```\n\nor\n\n```{bash}\nsource /home/koushik/.bash_profile\n```\n\n\n# Working with temporary root access\n\nIn linux, a typical user doesn't have permission to perform certain tasks with administrative previliges, like upgrading the system or creating a new user etc. \n\nTo perform these tasks there has to be a special user called *superuser*. Sometimes it is needed to behave like a superuser and do certain things what the superuser might have done. This is typically known as having **sudo** access which stands for *superuser do*. \n\nHere are some usage example to assist you :smile:\n\n\n```{bash}\n# updating repository information in Debian based systems\nsudo apt update \n\n# upgrading system packages\nsudo apt upgrade\n\n# creating a new user\nsudo add adduser Sajal\n```\n\n\nrunning all these commands needs the password and additional confirmation from the current user.\n\n\n# Running commands as scripts\n\nTill the previous section, whichever commands we have seen, can also be written in a file with the specific extension `.sh` and can be executed using that file. Such files are also called *shell script*. These are heavily used for automation and supporting other administrative tasks. \n\nLet's see an example below to understand this. \n\nAssume that we have a file called `commands.sh` in our present working directory. The code listing below can be considered as a template to perform certain jobs with command line utilities.\n\n\n```{bash}\n#!/bin/bash\necho \"Hello, World!\"\n\nmkdir test_dir\ncd test_dir\ntouch my_new_file.txt\n```\n\n\nThe first line (`#!/bin/bash`) is called a *shebang*, and it specifies the interpreter to use when running the script. In this case, we are using Bash.\n\nRemaining all are the actual commands that will be executed when the script is run. \n\nTo run the script, first save it and make it executable with the `chmod` command as below:\n\n\n```{bash}\nchmod 744 commands.sh\n```\n\nand then run it using **bash** as mentioned below\n\n\n```{bash}\nbash commands.sh\n```\n\n\nIn conclusion, the topic we've explored in this series of blog posts has been *an introduction to linux command line utilities*. We've delved into the intricacies of making someone more inclined to the command line usages, and hopefully shed some light on having a grip on useful commands.\n\nAs we wrap up this post, I want to leave you with some final thoughts as below,\n\n+ try to be comfortable with terminal as it is your only friend when you're on cloud\n+ play with commands, you will definitely learn something useful\n+ take help from internet as much as possible whenever you're stuck\n\nRemember that one simple command can save a lot of boring manual efforts.\n\nThank you for taking the time to read this post, and I hope you found it informative and thought-provoking.\n\n",
    "supporting": [
      "index_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}